name: Deploy Frontend to GCP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: smart-factory-cluster
  GKE_ZONE: asia-northeast3-a
  DEPLOYMENT_NAME: smart-factory-frontend
  IMAGE: smart-factory-frontend

jobs:
  build-and-deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run tests
      run: |
        npm run lint
        npm test

    - name: Build project
      run: npm run build

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker to use gcloud as a credential helper
      run: |-
        gcloud --quiet auth configure-docker

    - name: Get the GKE credentials so we can deploy to the cluster
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Build Docker image
      run: |-
        docker build -t "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" .

    - name: Publish Docker image to GCR
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    - name: Deploy frontend to GKE
      run: |-
        # 프론트엔드 배포 설정 생성
        cat << EOF > frontend-deployment.yaml
        apiVersion: v1
        kind: Service
        metadata:
          name: smart-factory-frontend
          namespace: smart-factory
          labels:
            app: smart-factory-frontend
        spec:
          ports:
          - port: 3000
            targetPort: 3000
            name: http
          selector:
            app: smart-factory-frontend
          type: LoadBalancer
        
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: smart-factory-frontend
          namespace: smart-factory
          labels:
            app: smart-factory-frontend
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: smart-factory-frontend
          template:
            metadata:
              labels:
                app: smart-factory-frontend
            spec:
              containers:
              - name: frontend
                image: gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
                ports:
                - containerPort: 3000
                env:
                - name: NEXT_PUBLIC_API_URL
                  value: "http://smart-factory-backend:8000"
                - name: NODE_ENV
                  value: "production"
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
        EOF
        
        # 배포 실행
        kubectl apply -f frontend-deployment.yaml
        
        # 롤아웃 상태 확인
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n smart-factory

    - name: Verify deployment
      run: |-
        kubectl get services -o wide -n smart-factory
        kubectl get pods -l app=smart-factory-frontend -n smart-factory
        
        # 프론트엔드 로그 확인
        echo "=== 프론트엔드 로그 ==="
        kubectl logs -l app=smart-factory-frontend -n smart-factory --tail=10

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './frontend'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'