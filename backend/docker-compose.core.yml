version: '3.8'

# Core Cluster 시뮬레이션 - 핵심 서비스들
services:
  # 백엔드 API 서버
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@timescaledb:5432/${POSTGRES_DB:-predictive_maintenance}
      - TIMESCALE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@timescaledb:5432/${POSTGRES_DB:-predictive_maintenance}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - MQTT_BROKER_HOST=mqtt
      - MQTT_BROKER_PORT=1883
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka.compute-network:9092}
      - REDIS_URL=redis://redis:6379
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-local}
      - AI_MODEL_SERVICE_ENDPOINT=${AI_MODEL_SERVICE_ENDPOINT:-http://ai-model:8001}
    depends_on:
      - timescaledb
      - mqtt
      - redis
    volumes:
      - ./models:/app/models
    networks:
      - core-network
      - compute-network  # Compute 클러스터와 통신용
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 데이터 수집기 (MQTT → Kafka)
  data-collector:
    build: .
    command: python -m app.services.data_collector
    environment:
      - MQTT_BROKER_HOST=mqtt
      - MQTT_BROKER_PORT=1883
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka.compute-network:9092}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-local}
    depends_on:
      - mqtt
    networks:
      - core-network
      - compute-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
          cpus: '0.1'
    restart: unless-stopped

  # TimescaleDB (PostgreSQL + TimescaleDB 확장)
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-predictive_maintenance}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/init_timescaledb.sql:/docker-entrypoint-initdb.d/init_timescaledb.sql
    networks:
      - core-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis (캐시 및 세션 저장소)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - core-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MQTT 브로커 (Unity 센서 시뮬레이터 연결용)
  mqtt:
    image: eclipse-mosquitto:latest
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./docker/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - core-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Frontend (Next.js)
  frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - backend
    networks:
      - core-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - timescaledb
    networks:
      - core-network

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - core-network

volumes:
  timescale_data:
  prometheus_data:
  grafana_data:

networks:
  core-network:
    driver: bridge
    name: core-network
  compute-network:
    external: true
    name: compute-network
