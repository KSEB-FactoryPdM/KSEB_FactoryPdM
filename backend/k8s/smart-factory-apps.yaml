apiVersion: v1
kind: Service
metadata:
  name: smart-factory-backend
  namespace: smart-factory
  labels:
    app: smart-factory-backend
spec:
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  selector:
    app: smart-factory-backend
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smart-factory-backend
  namespace: smart-factory
  labels:
    app: smart-factory-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: smart-factory-backend
  template:
    metadata:
      labels:
        app: smart-factory-backend
    spec:
      containers:
      - name: backend
        image: gcr.io/PROJECT_ID/smart-factory-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@timescaledb:5432/$(POSTGRES_DB)"
        - name: TIMESCALE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@timescaledb:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_DB
        envFrom:
        - configMapRef:
            name: smart-factory-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-collector
  namespace: smart-factory
  labels:
    app: data-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-collector
  template:
    metadata:
      labels:
        app: data-collector
    spec:
      containers:
      - name: data-collector
        image: gcr.io/PROJECT_ID/smart-factory-backend:latest
        command: ["python", "-m", "app.services.data_collector"]
        envFrom:
        - configMapRef:
            name: smart-factory-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-model-service
  namespace: smart-factory
  labels:
    app: ai-model-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-model-service
  template:
    metadata:
      labels:
        app: ai-model-service
    spec:
      containers:
      - name: ai-model
        image: gcr.io/PROJECT_ID/smart-factory-backend:latest
        command: ["python", "-m", "app.services.ai_model_service"]
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@timescaledb:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_DB
        envFrom:
        - configMapRef:
            name: smart-factory-config
        volumeMounts:
        - name: models-storage
          mountPath: /app/models
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: models-storage
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sensor-simulator
  namespace: smart-factory
  labels:
    app: sensor-simulator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sensor-simulator
  template:
    metadata:
      labels:
        app: sensor-simulator
    spec:
      containers:
      - name: sensor-simulator
        image: gcr.io/PROJECT_ID/smart-factory-backend:latest
        command: ["python", "-m", "app.services.sensor_simulator"]
        envFrom:
        - configMapRef:
            name: smart-factory-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: smart-factory-frontend
  namespace: smart-factory
  labels:
    app: smart-factory-frontend
spec:
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: smart-factory-frontend
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smart-factory-frontend
  namespace: smart-factory
  labels:
    app: smart-factory-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: smart-factory-frontend
  template:
    metadata:
      labels:
        app: smart-factory-frontend
    spec:
      containers:
      - name: frontend
        image: gcr.io/PROJECT_ID/smart-factory-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "http://smart-factory-backend:8000"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m" 