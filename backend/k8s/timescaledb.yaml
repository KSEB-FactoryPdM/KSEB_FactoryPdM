apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timescaledb-pvc
  namespace: smart-factory
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescaledb
  namespace: smart-factory
  labels:
    app: timescaledb
spec:
  serviceName: timescaledb
  replicas: 1
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
    spec:
      containers:
      - name: timescaledb
        image: timescale/timescaledb:latest-pg14
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smart-factory-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: timescaledb-pvc
      - name: init-script
        configMap:
          name: timescaledb-init-script

---
apiVersion: v1
kind: Service
metadata:
  name: timescaledb
  namespace: smart-factory
  labels:
    app: timescaledb
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: timescaledb
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescaledb-init-script
  namespace: smart-factory
data:
  init_timescaledb.sql: |
    -- TimescaleDB 확장 활성화
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
    
    -- 공장 설비 테이블
    CREATE TABLE IF NOT EXISTS equipment (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        type VARCHAR(50) NOT NULL,
        location VARCHAR(100),
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    
    -- 센서 테이블
    CREATE TABLE IF NOT EXISTS sensors (
        id SERIAL PRIMARY KEY,
        equipment_id INTEGER REFERENCES equipment(id),
        sensor_type VARCHAR(50) NOT NULL,
        sensor_id VARCHAR(50) UNIQUE NOT NULL,
        unit VARCHAR(20),
        min_value FLOAT,
        max_value FLOAT,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    -- 센서 데이터 테이블 (시계열)
    CREATE TABLE IF NOT EXISTS sensor_data (
        time TIMESTAMPTZ NOT NULL,
        sensor_id VARCHAR(50) NOT NULL,
        equipment_id INTEGER,
        value FLOAT NOT NULL,
        quality INTEGER DEFAULT 100,
        PRIMARY KEY (time, sensor_id)
    );
    
    -- TimescaleDB Hypertable 생성
    SELECT create_hypertable('sensor_data', 'time', if_not_exists => TRUE);
    
    -- 예측 결과 테이블
    CREATE TABLE IF NOT EXISTS predictions (
        id SERIAL PRIMARY KEY,
        time TIMESTAMPTZ NOT NULL,
        equipment_id INTEGER REFERENCES equipment(id),
        model_name VARCHAR(100),
        prediction_type VARCHAR(50),
        prediction_value FLOAT,
        confidence FLOAT,
        threshold FLOAT,
        is_anomaly BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT NOW()
    );
    
    -- 알림 테이블
    CREATE TABLE IF NOT EXISTS alerts (
        id SERIAL PRIMARY KEY,
        equipment_id INTEGER REFERENCES equipment(id),
        alert_type VARCHAR(50) NOT NULL,
        severity VARCHAR(20) DEFAULT 'medium',
        title VARCHAR(200) NOT NULL,
        message TEXT,
        status VARCHAR(20) DEFAULT 'open',
        created_at TIMESTAMP DEFAULT NOW(),
        resolved_at TIMESTAMP
    );
    
    -- 초기 데이터 삽입
    INSERT INTO equipment (name, type, location) VALUES
        ('압축기 A-001', 'compressor', '1번 라인'),
        ('모터 M-001', 'motor', '1번 라인'),
        ('펌프 P-001', 'pump', '2번 라인'),
        ('밸브 V-001', 'valve', '2번 라인'),
        ('컨베이어 C-001', 'conveyor', '3번 라인')
    ON CONFLICT DO NOTHING;
    
    -- 센서 데이터 삽입
    INSERT INTO sensors (equipment_id, sensor_type, sensor_id, unit, min_value, max_value) VALUES
        (1, 'temperature', 'TEMP_A001', '°C', -20, 100),
        (1, 'pressure', 'PRES_A001', 'bar', 0, 10),
        (1, 'vibration', 'VIB_A001', 'mm/s', 0, 50),
        (2, 'temperature', 'TEMP_M001', '°C', -20, 120),
        (2, 'current', 'CURR_M001', 'A', 0, 100),
        (2, 'rpm', 'RPM_M001', 'rpm', 0, 3000),
        (3, 'flow_rate', 'FLOW_P001', 'L/min', 0, 1000),
        (3, 'pressure', 'PRES_P001', 'bar', 0, 15),
        (4, 'position', 'POS_V001', '%', 0, 100),
        (5, 'speed', 'SPEED_C001', 'm/min', 0, 100)
    ON CONFLICT DO NOTHING; 