name: Core Cluster Deploy to GKE
on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/core-cluster-deploy.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/core-cluster-deploy.yml'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CORE_CLUSTER: core-cluster
  GKE_REGION: us-central1
  GKE_ZONE: us-central1-c
  BACKEND_IMAGE: smart-factory-backend
  FRONTEND_IMAGE: smart-factory-frontend
  DATA_COLLECTOR_IMAGE: smart-factory-data-collector
  SENSOR_SIMULATOR_IMAGE: smart-factory-sensor-simulator

jobs:
  build-and-test:
    name: Build and Test Core Services
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Backend 테스트
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run backend tests
      run: |
        cd backend
        # 핵심 모듈 import 테스트
        python -c "
        print('=== Core Services 모듈 Import 테스트 ===')
        try:
            from app.main import app
            print('✅ FastAPI 앱 import 성공')
        except Exception as e:
            print(f'❌ FastAPI 앱 import 실패: {e}')
            exit(1)
        
        try:
            from app.services.notification_service import NotificationService
            print('✅ 알림 서비스 import 성공')
        except Exception as e:
            print(f'❌ 알림 서비스 import 실패: {e}')
            exit(1)
            
        # 레거시 학습 서비스(ModelService) 체크는 건너뜀 (serve_ml 서빙 경로 사용)
        
        print('✅ Core Cluster 핵심 모듈 import 성공!')
        "
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/test_db
        TIMESCALE_URL: postgresql://postgres:testpassword@localhost:5432/test_timescale
        SECRET_KEY: test-secret-key-for-testing-only-do-not-use-in-production
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        MQTT_BROKER_HOST: localhost
        MQTT_BROKER_PORT: 1883
        REDIS_URL: redis://localhost:6379
        APP_PROMETHEUS_PORT: 9090
        APP_GRAFANA_PORT: 3000

    # Frontend 테스트
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --ignore-scripts
        npm i -D ts-node @testing-library/dom --ignore-scripts

    - name: Ensure clean Next cache
      run: |
        cd frontend
        rm -rf .next || true

    - name: Run frontend lint
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  create-core-cluster:
    name: Create Core Cluster if not exists
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install gke-gcloud-auth-plugin
      run: gcloud components install gke-gcloud-auth-plugin --quiet
      
    - name: Activate service account
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > ${HOME}/gcp-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          
    - name: Set active gcloud account
      run: |
        gcloud config set account ${{ fromJson(secrets.GCP_SA_KEY).client_email }}

    - name: Create Core Cluster (Autopilot)
      run: |-
        # Core Cluster가 존재하는지 확인
        if ! gcloud container clusters describe "$GKE_CORE_CLUSTER" --region "$GKE_REGION" &> /dev/null; then
          echo "Core Cluster(Autopilot)가 존재하지 않습니다. 새로 생성합니다..."

          # Core Cluster (Autopilot) 생성
          gcloud container clusters create-auto "$GKE_CORE_CLUSTER" \
            --region="$GKE_REGION" \
            --labels=cluster-type=core,environment=production

          echo "✅ Core Cluster(Autopilot) 생성 완료"
        else
          echo "✅ Core Cluster가 이미 존재합니다."
        fi

  deploy-to-core-cluster:
    name: Deploy to Core Cluster
    runs-on: ubuntu-latest
    needs: create-core-cluster
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install gke-gcloud-auth-plugin
      run: gcloud components install gke-gcloud-auth-plugin --quiet
      
    - name: Activate service account
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > ${HOME}/gcp-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          
    - name: Set active gcloud account
      run: |
        gcloud config set account ${{ fromJson(secrets.GCP_SA_KEY).client_email }}

    - name: Configure Docker to use gcloud as a credential helper
      run: |-
        gcloud --quiet auth configure-docker

    - name: Get the Core Cluster credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CORE_CLUSTER" --region "$GKE_REGION"

    - name: Build Backend Docker image
      run: |-
        cd backend
        docker build -t "gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA" .

    - name: Build Frontend Docker image
      run: |-
        cd frontend
        docker build -t "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA" .

    - name: Publish Docker images to GCR
      run: |-
        docker push "gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA"
        docker push "gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA"

    - name: Deploy Core Infrastructure
      run: |-
        cd backend
        
        # Core Cluster 전용 네임스페이스 생성
        kubectl create namespace smart-factory-core --dry-run=client -o yaml | kubectl apply -f -
        
        # Core Cluster 시크릿 동적 생성 (Compute Cluster 연결 정보 포함)
        kubectl create secret generic smart-factory-secrets \
          --from-literal=POSTGRES_USER=user \
          --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --from-literal=POSTGRES_DB=predictive_maintenance \
          --from-literal=KAFKA_BOOTSTRAP_SERVERS=${{ secrets.COMPUTE_CLUSTER_KAFKA_ENDPOINT }} \
          --from-literal=AI_MODEL_SERVICE_ENDPOINT=${{ secrets.COMPUTE_CLUSTER_AI_ENDPOINT }} \
          --namespace=smart-factory-core \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Core Cluster ConfigMap 적용
        sed -i 's/namespace: smart-factory/namespace: smart-factory-core/g' k8s/secrets.yaml
        kubectl apply -f k8s/secrets.yaml
        
        # 기존 StatefulSet이 있으면 삭제 (spec 수정 불가능하므로)
        kubectl delete statefulset timescaledb -n smart-factory-core --ignore-not-found=true
        
        # Core Infrastructure 서비스 배포 (네임스페이스 수정)
        sed -i 's/namespace: smart-factory/namespace: smart-factory-core/g' k8s/timescaledb.yaml
        sed -i 's/namespace: smart-factory/namespace: smart-factory-core/g' k8s/mqtt-redis.yaml
        sed -i 's/namespace: smart-factory/namespace: smart-factory-core/g' k8s/monitoring.yaml
        
        kubectl apply -f k8s/timescaledb.yaml
        kubectl apply -f k8s/mqtt-redis.yaml
        kubectl apply -f k8s/monitoring.yaml
        
        # 인프라 서비스가 준비될 때까지 대기
        kubectl wait --for=condition=ready pod -l app=timescaledb -n smart-factory-core --timeout=300s
        kubectl wait --for=condition=ready pod -l app=mqtt -n smart-factory-core --timeout=300s
        kubectl wait --for=condition=ready pod -l app=redis -n smart-factory-core --timeout=300s

    - name: Deploy Core Applications
      run: |-
        cd backend
        
        # Core 애플리케이션용 매니페스트 생성 (기존 파일 기반)
        cp k8s/smart-factory-apps.yaml k8s/core-apps.yaml
        cp k8s/frontend-apps.yaml k8s/core-frontend.yaml
        
        # 네임스페이스를 core로 변경
        sed -i 's/namespace: smart-factory/namespace: smart-factory-core/g' k8s/core-apps.yaml
        sed -i 's/namespace: smart-factory/namespace: smart-factory-core/g' k8s/core-frontend.yaml

        # 초기 안정화를 위한 설정은 매니페스트에 반영됨(backend replicas=1, readiness=20)
        
        # 백엔드 이미지 태그 업데이트
        sed -i "s|gcr.io/PROJECT_ID/smart-factory-backend|gcr.io/$PROJECT_ID/$BACKEND_IMAGE|g" k8s/core-apps.yaml
        sed -i "s|smart-factory-backend:latest|$BACKEND_IMAGE:$GITHUB_SHA|g" k8s/core-apps.yaml
        
        # 프론트엔드 이미지 태그 업데이트
        sed -i "s|gcr.io/PROJECT_ID/smart-factory-frontend|gcr.io/$PROJECT_ID/$FRONTEND_IMAGE|g" k8s/core-frontend.yaml
        sed -i "s|smart-factory-frontend:latest|$FRONTEND_IMAGE:$GITHUB_SHA|g" k8s/core-frontend.yaml
        
        # Core 애플리케이션 배포 (backend, frontend, data-collector)
        kubectl apply -f k8s/core-apps.yaml
        kubectl apply -f k8s/core-frontend.yaml
        
        # 서비스 롤아웃 상태 확인 (실패 시 상세 진단 출력)
        kubectl rollout status deployment/smart-factory-backend -n smart-factory-core --timeout=600s || ({ \
          echo "=== Debug: smart-factory-backend ==="; \
          kubectl get pods -n smart-factory-core -o wide; \
          kubectl describe deployment smart-factory-backend -n smart-factory-core; \
          kubectl describe pods -l app=smart-factory-backend -n smart-factory-core; \
          kubectl logs -l app=smart-factory-backend -n smart-factory-core --tail=200; \
          exit 1; })
        kubectl rollout status deployment/smart-factory-frontend -n smart-factory-core --timeout=600s || ({ \
          echo "=== Debug: smart-factory-frontend ==="; \
          kubectl get pods -n smart-factory-core -o wide; \
          kubectl describe deployment smart-factory-frontend -n smart-factory-core; \
          kubectl describe pods -l app=smart-factory-frontend -n smart-factory-core; \
          kubectl logs -l app=smart-factory-frontend -n smart-factory-core --tail=200; \
          exit 1; })
        kubectl rollout status deployment/data-collector -n smart-factory-core --timeout=600s || true
        # sensor-simulator는 Unity에서 외부 연결하므로 배포하지 않음

    - name: Verify Core Cluster Deployment
      run: |-
        kubectl get services -o wide -n smart-factory-core
        kubectl get pods -n smart-factory-core
        
        # 서비스 상태 확인
        echo "=== Core Cluster 서비스 상태 ==="
        kubectl get svc smart-factory-backend -n smart-factory-core
        kubectl get svc smart-factory-frontend -n smart-factory-core
        
        # 애플리케이션 로그 확인
        echo "=== 백엔드 로그 ==="
        kubectl logs -l app=smart-factory-backend -n smart-factory-core --tail=10
        
        echo "=== 프론트엔드 로그 ==="
        kubectl logs -l app=smart-factory-frontend -n smart-factory-core --tail=10
        
        echo "=== 데이터 수집기 로그 ==="
        kubectl logs -l app=data-collector -n smart-factory-core --tail=10

    - name: Patch Frontend env with external endpoints
      run: |-
        # 외부 IP 조회
        BACKEND_IP=$(kubectl get svc smart-factory-backend -n smart-factory-core -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        GRAFANA_IP=$(kubectl get svc grafana -n smart-factory-core -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Backend LB IP: ${BACKEND_IP}"
        echo "Grafana LB IP: ${GRAFANA_IP}"

        # 환경변수 패치 (없으면 추가)
        if [ -n "$BACKEND_IP" ]; then
          kubectl set env deployment/smart-factory-frontend \
            -n smart-factory-core \
            NEXT_PUBLIC_API_URL="http://${BACKEND_IP}:8000" \
            NEXT_PUBLIC_WEBSOCKET_URL="ws://${BACKEND_IP}:8000/api/v1/ws" || true
        fi

        if [ -n "$GRAFANA_IP" ]; then
          kubectl set env deployment/smart-factory-frontend \
            -n smart-factory-core \
            NEXT_PUBLIC_GRAFANA_BASE_URL="http://${GRAFANA_IP}:3000" || true
        fi

        # 롤아웃 재시작으로 환경변수 반영
        kubectl rollout restart deployment/smart-factory-frontend -n smart-factory-core

    - name: Health Check
      run: |-
        # Core Cluster 서비스들의 헬스 체크
        echo "=== Core Cluster 헬스 체크 ==="
        
        # 백엔드 서비스 헬스 체크
        BACKEND_IP=$(kubectl get svc smart-factory-backend -n smart-factory-core -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$BACKEND_IP" ]; then
          echo "백엔드 서비스 IP: $BACKEND_IP"
          curl -f http://$BACKEND_IP:8000/health || echo "백엔드 헬스 체크 실패"
        fi
        
        # 인프라 서비스 상태 확인
        kubectl get pods -l app=timescaledb -n smart-factory-core
        kubectl get pods -l app=redis -n smart-factory-core
        kubectl get pods -l app=mqtt -n smart-factory-core